{"version":3,"file":"static/js/838.0880074c.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.tsx","components/skeleton/styledComponents.ts","components/skeleton/MovieSkeleton.tsx","components/movieList/MovieList.tsx","components/skeleton/SkeletonInfo.tsx","components/movieInfo/MovieInfo.tsx","components/movieSearchForm/movieSearchForm.tsx","components/pages/MainPage.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport img from './error.gif';\n\nconst ErrorMessageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst ErrorMessageText = styled.h2`\n  text-align: center;\n`;\n\nconst ErrorMessageImage = styled.img`\n  display: block;\n  height: 400px;\n  object-fit: contain;\n  margin: 0 auto;\n`;\n\nconst ErrorMessage = () => {\n  return (\n    <ErrorMessageContainer>\n      <ErrorMessageText>Something went wrong</ErrorMessageText>\n      <ErrorMessageImage src={img} alt=\"error\"/>\n    </ErrorMessageContainer>\n  )\n}\n\nexport default ErrorMessage;\n","import styled, { keyframes } from 'styled-components';\n\nconst pulse = keyframes`\n  0% { opacity: 1; }\n  50% { opacity: 0.4; }\n  100% { opacity: 1; }\n`;\n\nexport const SkeletonMovie = styled.li`\n  position: relative;\n  width: 200px;\n  height: 318px;\n  background-color: white;\n  box-shadow: 5px 5px 10px rgba(0, 0, 0, .25);\n  padding: 15px;\n  border-radius: 8px;\n  overflow: hidden;\n`;\n\nexport const SkeletonMovieHeader = styled.div`\n  position: relative;\n  width: 200px;\n  height: 200px;\n  object-fit: cover;\n  transform: translate(-15px, -15px);\n  background-color: #C4C4C4;\n  animation: ${pulse} 2s infinite;\n`;\n\nexport const SkeletonMovieMini = styled.div`\n  margin-bottom: 15px;\n  height: 16px;\n  background-color: #C4C4C4;\n  animation: ${pulse} 2s infinite;\n`;\n\nexport const SkeletonInfoHeader = styled.div`\n  display: grid;\n  grid-template-columns: 40px auto;\n  column-gap: 10px;\n  align-items: center;\n`;\n\nexport const SkeletonInfoCircle = styled.div`\n  width: 40px;\n  height: 40px;\n  background-color: #C4C4C4;\n  border-radius: 100%;\n  animation: ${pulse} 2s infinite;\n`;\n\nexport const SkeletonInfoMini = styled.div`\n  width: 100%;\n  height: 16px;\n  background-color: #C4C4C4;\n  animation: ${pulse} 2s infinite;\n`;\n\nexport const SkeletonInfoBlock = styled.div`\n  height: 35px;\n  width: 100%;\n  background-color: #C4C4C4;\n  margin-top: 15px;\n  animation: ${pulse} 2s infinite;\n`;\n\nexport const SkeletonInfoTitle = styled.p`\n    font-weight: bold;\n    font-size: 18px;\n    line-height: 24px;\n    text-align: center;\n`","import React from 'react';\nimport { SkeletonMovie, SkeletonMovieHeader, SkeletonMovieMini } from './styledComponents.ts';\n\nconst MovieSkeleton = () => {\n    return (\n        <SkeletonMovie>\n            <SkeletonMovieHeader />\n            <SkeletonMovieMini />\n            <SkeletonMovieMini />\n            <SkeletonMovieMini />\n        </SkeletonMovie>\n    )\n}\n\nexport default MovieSkeleton;\n","import React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Transition, TransitionGroup } from 'react-transition-group';\nimport { fetchMovieList, setActiveCard } from '../../store/movieSlice.ts';\nimport { AppDispatch, RootState } from '../../store/index.ts';\nimport ErrorMessage from '../errorMessage/ErrorMessage.tsx';\nimport MovieSkeleton from '../skeleton/MovieSkeleton.tsx';\n\nimport StarBorderIcon from '@mui/icons-material/StarBorder';\nimport StarIcon from '@mui/icons-material/Star';\n\nimport './movieList.scss';\nimport { IMovie, IMovieList } from '../../types/movie.ts';\nimport { IQueryMovieList } from '../../services/MoviesService.ts';\n\ninterface IMovieListProps {\n    onMovieSelected: (value: IMovie | null) => void;\n}\n\nconst MovieList = ({onMovieSelected}: IMovieListProps) => {\n    const movieList = useSelector((state: RootState) => state.movie.movieList)\n    const movieTotal = useSelector((state: RootState) => state.movie.total)\n    const movieListLoadingStatus = useSelector((state: RootState) => state.movie.movieListLoadingStatus);\n    const activeSearchValue = useSelector((state: RootState) => state.movie.activeSearchValue);\n    const page = useSelector((state: RootState) => state.movie.page);\n    const activeMovieCard = useSelector((state: RootState) => state.movie.activeMovieCard)\n    const favouriteIds = useSelector((state: RootState) => state.favourite.favouriteIds)\n\n    const dispatch = useDispatch<AppDispatch>();\n    \n    useEffect(() => {\n        onMovieSelected(activeMovieCard);\n        //eslint-disable-next-line\n    }, []) \n\n    const onRequest = () => {\n        const query: IQueryMovieList = {\n            title: activeSearchValue,\n            page: page + 1,\n        }\n        dispatch(fetchMovieList(query))\n    }\n    \n\n    const selectMovie = (movie: IMovie) => {\n        dispatch(setActiveCard(movie))\n        onMovieSelected(movie);\n    }\n\n    const duration = 200;\n    const defaultStyle = {\n        transition: `all ${duration}ms ease-in-out`,\n        opacity: 0,\n        visibility: 'hidden'\n    }\n    const transitionStyles = {\n        entering: { opacity: 0, visibility: 'hidden' },\n        entered: { opacity: 1, visibility: 'visible' },\n        exiting: { opacity: 1, visibility: 'visible' },\n        exited: { opacity: 0, visibility: 'hidden' },\n    }\n\n    const renderItems = (list: IMovieList) => {\n        const items = list.map(item => {\n            const starOptions = { color: '#F5C518', fontSize: '30px' };\n            const isFavourite = favouriteIds.includes(item.id) \n\n            return (\n                <Transition \n                    timeout={duration} \n                    key={item.id}\n                >\n                    {(state) => {\n                        return (\n                            <li className=\"movie__item\" \n                            style={{\n                                ...defaultStyle,\n                                ...transitionStyles[state]\n                            }}\n                            onClick={() => {\n                                selectMovie(item);\n                            }}\n                            onKeyDown={(e) => {\n                                if(e.key === \"Enter\" || e.key === 'e') {\n                                    selectMovie(item);\n                                }\n                            }}\n                            tabIndex={0}\n                            >\n                                {isFavourite ? <StarIcon sx={starOptions}/> : <StarBorderIcon sx={starOptions}/>}\n                                <img src={item.poster} alt={item.title} />\n                                <div className=\"movie__name\">{item.title}</div>\n                            </li>\n                    )}}\n                </Transition>\n            )\n        })\n\n        if (items.length === 0) {\n            return (\n                <ul className=\"movie__grid\">\n                    {Array.from({ length: 6 }).map((item, i) => (\n                        <MovieSkeleton key={i} />\n                    ))}\n                </ul>\n            )\n        }\n\n        return (\n            <ul className=\"movie__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const renderButton = (loadingStatus: string, movieList: IMovieList, movieTotal: number) => {\n        const isDisabled = loadingStatus === \"loading\"\n        const style = {'display' : movieList.length === movieTotal ? 'none' : 'block'}\n\n        return (\n            <button \n                className=\"button button__main button__long\"\n                disabled={isDisabled}\n                style={style}\n                onClick={() => onRequest()}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        )\n    }\n\n    const items = renderItems(movieList)\n    const button = renderButton(movieListLoadingStatus, movieList, movieTotal)\n\n    return (\n        <div className=\"movie__list\">\n            {movieListLoadingStatus === \"error\" ? <ErrorMessage/> : items}\n            {button}\n        </div>\n    )\n}\n\nexport default MovieList;","import React from 'react';\nimport { SkeletonInfoTitle, SkeletonInfoHeader, SkeletonInfoCircle, SkeletonInfoMini, SkeletonInfoBlock } from './styledComponents.ts';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <SkeletonInfoTitle>Please select a movie to see information</SkeletonInfoTitle>\n            <div>\n                <SkeletonInfoHeader>\n                    <SkeletonInfoCircle />\n                    <SkeletonInfoMini />\n                </SkeletonInfoHeader>\n                <SkeletonInfoBlock />\n                <SkeletonInfoBlock />\n                <SkeletonInfoBlock />\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport StarBorderIcon from '@mui/icons-material/StarBorder';\nimport StarIcon from '@mui/icons-material/Star';\nimport SkeletonInfo from '../skeleton/SkeletonInfo.tsx';\nimport { IMovie } from '../../types/movie';\nimport './movieInfo.scss';\n\ninterface IMovieInfoProps {\n    movie: IMovie | null,\n    star: boolean\n}\n\nconst MovieInfo = (props: IMovieInfoProps) => {\n    return (\n        <div className=\"movie__info\">\n            { props.movie ? <View {...props} /> : <SkeletonInfo/> }\n        </div>\n    )\n}\n\nconst View = ({movie, star}) => {\n    const starOptions = { color: '#090907', fontSize: '30px' };\n    const {title, year, poster, id} = movie\n\n    return (\n        <div className=\"movie__basics\">\n            <div className='movie__info-img'>\n                <img src={poster} alt={title}  />\n                { star ? <StarIcon sx={starOptions}/> : <StarBorderIcon sx={starOptions}/> }\n            </div>\n            <div className=\"movie__info-wrapper\">\n                <div>\n                    <div className=\"movie__info-name\">{title}</div>\n                    <div className=\"movie__descr\">Year: {year}</div>\n                </div>\n                <div className=\"movie__btns\">\n                    <Link to={`/movie/${id}`} className=\"button button__main\">\n                        <div className=\"inner\">Movie page</div>\n                    </Link>\n                </div>\n            </div>\n        </div>\n    )\n} \n\nexport default MovieInfo;","import React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from '../../store/index.ts';\nimport { fetchMovieList } from '../../store/movieSlice.ts';\nimport { IQueryMovieList } from '../../services/MoviesService.ts';\nimport './movieSearchForm.scss';\n\nconst MovieSearchForm = () => {\n    const movieListLoadingStatus = useSelector((state: RootState) => state.movie.movieListLoadingStatus);\n    const activeSearchValue = useSelector((state: RootState) => state.movie.activeSearchValue);\n\n    const dispatch = useDispatch<AppDispatch>();\n    const updateMovie = async (searchValue: string) => {\n        const query: IQueryMovieList = {\n            title: searchValue,\n            page: 1,\n        }\n        dispatch(fetchMovieList(query))\n    }\n\n    const validationSchema = Yup.object({\n        searchValue: Yup.string().required('This field is required'),\n    })\n\n    return (\n        <Formik \n            initialValues={{searchValue: activeSearchValue}}\n            validationSchema={validationSchema}\n            onSubmit={async ({searchValue}, {setSubmitting}) => {\n                await updateMovie(searchValue)\n                setSubmitting(false);\n            }}\n        >\n            {({\n                values, \n                errors, \n                touched,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n            }) => (\n                <form className=\"movie__search-form\" onSubmit={handleSubmit}>\n                    <label htmlFor=\"\" className='movie__search-label'>Find movie by title</label>\n                    <div className='movie__search-wrapper'>\n                            <input \n                                type=\"text\" \n                                name=\"searchValue\" \n                                className='movie__search-label' \n                                placeholder='Batman'\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.searchValue}\n                            /> \n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={movieListLoadingStatus === 'loading'}\n                        >\n                            <div className=\"inner\">Find</div>\n                        </button>\n                        \n                    </div>\n                    { errors.searchValue && touched.searchValue ? <div className='movie__search-error'>{errors.searchValue}</div> : null }\n                </form>\n            )}\n           \n        </Formik>\n    )\n}\n\nexport default MovieSearchForm;","import { RootState } from '../../store/index.ts';\nimport React, { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport MovieList from \"../movieList/MovieList.tsx\";\nimport MovieInfo from \"../movieInfo/MovieInfo.tsx\";\nimport MovieSearchForm from \"../movieSearchForm/movieSearchForm.tsx\";\nimport { useSelector } from 'react-redux';\nimport { IMovie } from '../../types/movie.ts';\n\nconst MainPage = () => {\n    const favouriteIds = useSelector((state: RootState) => state.favourite.favouriteIds)\n\n    const [selectedMovie, setMovie] = useState<IMovie | null>(null);\n    const [isFavourite, setIsFavourite] = useState<boolean>(false);\n\n    const onMovieSelected = (movie: IMovie | null) => {\n        setMovie(movie);\n        if(movie) setIsFavourite(favouriteIds.includes(movie.id))\n    }\n\n    return (\n      <>\n        <Helmet>\n            <meta\n                name=\"description\"\n                content=\"MovieDB information portal\"\n            />\n            <title>Movie Database</title>\n        </Helmet>\n        <MovieSearchForm />\n        <div className=\"movie__content\">\n            <MovieList onMovieSelected={onMovieSelected}/>\n            <div style={{position: 'sticky', top: 25}}>\n                <MovieInfo movie={selectedMovie} star={isFavourite}/>\n            </div>\n        </div>\n      </>\n    )\n}\n\nexport default MainPage;"],"names":["ErrorMessageContainer","styled","div","_templateObject","_taggedTemplateLiteral","ErrorMessageText","h2","_templateObject2","ErrorMessageImage","img","_templateObject3","ErrorMessage","_jsxs","children","_jsx","src","alt","pulse","keyframes","SkeletonMovie","li","SkeletonMovieHeader","SkeletonMovieMini","_templateObject4","SkeletonInfoHeader","_templateObject5","SkeletonInfoCircle","_templateObject6","SkeletonInfoMini","_templateObject7","SkeletonInfoBlock","_templateObject8","SkeletonInfoTitle","p","_templateObject9","MovieSkeleton","_ref","onMovieSelected","movieList","useSelector","state","movie","movieTotal","total","movieListLoadingStatus","activeSearchValue","page","activeMovieCard","favouriteIds","favourite","dispatch","useDispatch","useEffect","selectMovie","setActiveCard","defaultStyle","transition","concat","opacity","visibility","transitionStyles","entering","entered","exiting","exited","items","list","map","item","starOptions","color","fontSize","isFavourite","includes","id","Transition","timeout","className","style","onClick","onKeyDown","e","key","tabIndex","StarIcon","sx","StarBorderIcon","poster","title","length","Array","from","i","TransitionGroup","component","renderItems","button","renderButton","loadingStatus","isDisabled","disabled","onRequest","query","fetchMovieList","Skeleton","_Fragment","View","star","year","Link","to","props","SkeletonInfo","MovieSearchForm","validationSchema","Yup","searchValue","required","Formik","initialValues","onSubmit","async","_ref2","setSubmitting","updateMovie","_ref3","values","errors","touched","handleChange","handleBlur","handleSubmit","htmlFor","type","name","placeholder","onChange","onBlur","value","MainPage","selectedMovie","setMovie","useState","setIsFavourite","Helmet","content","MovieList","position","top","MovieInfo"],"sourceRoot":""}