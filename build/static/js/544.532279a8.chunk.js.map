{"version":3,"file":"static/js/544.532279a8.chunk.js","mappings":"kOAIA,MAAMA,EAAwBC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+EAMlCC,EAAmBJ,EAAAA,GAAOK,GAAEC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,iCAI5BI,EAAoBP,EAAAA,GAAOQ,IAAGC,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,0FAgBpC,EATqBO,KAEjBC,EAAAA,EAAAA,MAACZ,EAAqB,CAAAa,SAAA,EACpBC,EAAAA,EAAAA,KAACT,EAAgB,CAAAQ,SAAC,0BAClBC,EAAAA,EAAAA,KAACN,EAAiB,CAACO,IAAKN,EAAKO,IAAI,Y,sHCdvC,MAqDMC,EAAOC,IAA+B,IAA9B,cAAEC,EAAa,MAAEC,GAAOF,EAEpC,MAAMG,GACJP,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,kBAAiBT,SAC7BO,IAICG,GACJT,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,mBAAkBT,UAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qCAIR,OAAOM,EAAcK,OAASH,EAAiBE,CAAe,EAGhE,EAtEuBE,KACrB,MAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAgBC,EAAAA,EAAAA,KACnBC,GAAqBA,EAAMC,UAAUH,gBAElCI,GAAyBH,EAAAA,EAAAA,KAC5BC,GAAqBA,EAAMC,UAAUC,yBAElCC,GAAeJ,EAAAA,EAAAA,KAClBC,GAAqBA,EAAMC,UAAUE,gBAGxCC,EAAAA,EAAAA,YAAU,KACJD,GAAcP,GAASS,EAAAA,EAAAA,IAAgBF,GAAc,GAExD,CAACA,IAEJ,MAcMb,EAdegB,KACnB,MAAMhB,EAAQgB,EAAUC,KAAIC,IAAoC,IAAnC,GAAEC,EAAE,MAAEC,EAAK,OAAEC,GAAgBH,EACxD,OACExB,EAAAA,EAAAA,KAAC4B,EAAAA,GAAI,CAACC,GAAE,UAAAC,OAAYL,GAAK1B,UACvBD,EAAAA,EAAAA,MAAA,MAAIU,UAAU,kBAAiBT,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,OAAKC,IAAK0B,EAAQzB,IAAKwB,KACvB1B,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,kBAAiBT,SAAE2B,QAHPD,EAKxB,IAGX,OAAOzB,EAAAA,EAAAA,KAAA,MAAIQ,UAAU,kBAAiBT,SAAEO,GAAW,EAGvCyB,CAAYjB,GAU1B,OACEd,EAAAA,EAAAA,KAAA,OAAK,cAAY,kBAAiBD,SAEH,SAA3BmB,GACIlB,EAAAA,EAAAA,KAACG,EAAI,CAACE,cAAec,EAAcb,MAAOA,KAZhC0B,EAaCd,EAZG,YAAlBc,GACKhC,EAAAA,EAAAA,KAACiC,EAAAA,EAAO,IACY,UAAlBD,GACFhC,EAAAA,EAAAA,KAACH,EAAAA,EAAY,SADf,KAHWmC,KAeZ,C","sources":["components/errorMessage/ErrorMessage.tsx","components/pages/FavouritesPage.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport img from './error.gif';\n\nconst ErrorMessageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst ErrorMessageText = styled.h2`\n  text-align: center;\n`;\n\nconst ErrorMessageImage = styled.img`\n  display: block;\n  height: 400px;\n  object-fit: contain;\n  margin: 0 auto;\n`;\n\nconst ErrorMessage = () => {\n  return (\n    <ErrorMessageContainer>\n      <ErrorMessageText>Something went wrong</ErrorMessageText>\n      <ErrorMessageImage src={img} alt=\"error\"/>\n    </ErrorMessageContainer>\n  )\n}\n\nexport default ErrorMessage;\n","import { Link } from \"react-router-dom\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \"../../store/index.tsx\";\nimport Spinner from \"../spinner/Spinner.tsx\";\nimport { fetchFavourites } from \"../../store/favouriteSlice.ts\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage.tsx\";\n\nimport \"./favouritesPage.scss\";\nimport { IMovie, IMovieList } from \"../../types/movie.ts\";\n\nconst FavouritesPage = () => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const favouriteList = useSelector(\n    (state: RootState) => state.favourite.favouriteList\n  );\n  const favouriteLoadingStatus = useSelector(\n    (state: RootState) => state.favourite.favouriteLoadingStatus\n  );\n  const favouriteIds = useSelector(\n    (state: RootState) => state.favourite.favouriteIds\n  );\n\n  useEffect(() => {\n    if (favouriteIds) dispatch(fetchFavourites(favouriteIds));\n    //eslint-disable-next-line\n  }, [favouriteIds]);\n\n  const renderItems = (movieList: IMovieList) => {\n    const items = movieList.map(({ id, title, poster }: IMovie) => {\n      return (\n        <Link to={`/movie/${id}`} key={id}>\n          <li className=\"favourite__item\">\n            <img src={poster} alt={title} />\n            <div className=\"favourite__name\">{title}</div>\n          </li>\n        </Link>\n      );\n    });\n    return <ul className=\"favourite__grid\">{items}</ul>;\n  };\n\n  const items = renderItems(favouriteList);\n\n  const pageStatus = (loadingStatus: 'idle' | 'loading' | 'error') => {\n    if (loadingStatus === \"loading\") {\n      return <Spinner />;\n    } else if (loadingStatus === \"error\") {\n      return <ErrorMessage />;\n    }\n  }\n  \n  return (\n    <div data-testid=\"favourites-page\">\n      {\n        favouriteLoadingStatus === 'idle' \n          ? <View favoutiresIds={favouriteIds} items={items} />\n          : pageStatus(favouriteLoadingStatus) \n      }\n    </div>\n  );\n};\n\nconst View = ({ favoutiresIds, items }) => {\n\n  const favouritesList = (\n    <div className=\"favourite__list\">\n      {items}\n    </div>\n  )\n\n  const favouritesEmpty = (\n    <div className=\"favourite__empty\">\n      <h1>Please add movie to favourites</h1>\n    </div>\n  )\n\n  return favoutiresIds.length ? favouritesList : favouritesEmpty\n}\n\nexport default FavouritesPage;\n"],"names":["ErrorMessageContainer","styled","div","_templateObject","_taggedTemplateLiteral","ErrorMessageText","h2","_templateObject2","ErrorMessageImage","img","_templateObject3","ErrorMessage","_jsxs","children","_jsx","src","alt","View","_ref2","favoutiresIds","items","favouritesList","className","favouritesEmpty","length","FavouritesPage","dispatch","useDispatch","favouriteList","useSelector","state","favourite","favouriteLoadingStatus","favouriteIds","useEffect","fetchFavourites","movieList","map","_ref","id","title","poster","Link","to","concat","renderItems","loadingStatus","Spinner"],"sourceRoot":""}